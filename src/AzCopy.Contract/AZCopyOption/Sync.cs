
// <auto-generated />
namespace AzCopy.Contract
{
    public class SyncOption : CommandArgsBase
    {
        /// <summary>
		/// Use this block size (specified in MiB) when uploading to Azure Storage or downloading from Azure Storage. Default is automatically calculated based on file size. Decimal fractions are allowed (For example: 0.25).
        /// </summary>
		[CLIArgumentName("block-size-mb")]
		public float? BlockSizeMb { get; set; }

        /// <summary>
		/// Specifies how strictly MD5 hashes should be validated when downloading. This option is only available when downloading. Available values include: NoCheck, LogOnly, FailIfDifferent, FailIfDifferentOrMissing. (default 'FailIfDifferent'). (default "FailIfDifferent")
        /// </summary>
		[CLIArgumentName("check-md5", true)]
		public string CheckMd5 { get; set; }

        /// <summary>
		/// Defines whether to delete extra files from the destination that are not present at the source. Could be set to true, false, or prompt. If set to prompt, the user will be asked a question before scheduling files and blobs for deletion. (default 'false'). (default "false")
        /// </summary>
		[CLIArgumentName("delete-destination", true)]
		public string DeleteDestination { get; set; }

        /// <summary>
		/// (Windows only) Exclude files whose attributes match the attribute list. For example: A;S;R
        /// </summary>
		[CLIArgumentName("exclude-attributes", true)]
		public string ExcludeAttributes { get; set; }

        /// <summary>
		/// Exclude these paths when comparing the source against the destination. This option does not support wildcard characters (*). Checks relative path prefix(For example: myFolder;myFolder/subDirName/file.pdf).
        /// </summary>
		[CLIArgumentName("exclude-path", true)]
		public string ExcludePath { get; set; }

        /// <summary>
		/// Exclude files where the name matches the pattern list. For example: *.jpg;*.pdf;exactName
        /// </summary>
		[CLIArgumentName("exclude-pattern", true)]
		public string ExcludePattern { get; set; }

        /// <summary>
		/// (Windows only) Include only files whose attributes match the attribute list. For example: A;S;R
        /// </summary>
		[CLIArgumentName("include-attributes", true)]
		public string IncludeAttributes { get; set; }

        /// <summary>
		/// Include only files where the name matches the pattern list. For example: *.jpg;*.pdf;exactName
        /// </summary>
		[CLIArgumentName("include-pattern", true)]
		public string IncludePattern { get; set; }

        /// <summary>
		/// Define the log verbosity for the log file, available levels: INFO(all requests and responses), WARNING(slow responses), ERROR(only failed requests), and NONE(no output logs). (default INFO). (default "INFO")
        /// </summary>
		[CLIArgumentName("log-level", true)]
		public string LogLevel { get; set; }

        /// <summary>
		/// Create an MD5 hash of each file, and save the hash as the Content-MD5 property of the destination blob or file. (By default the hash is NOT created.) Only available when uploading.
        /// </summary>
		[CLIArgumentName("put-md5")]
		public bool? PutMd5 { get; set; }

        /// <summary>
		/// True by default, look into sub-directories recursively when syncing between directories. (default true). (default true)
        /// </summary>
		[CLIArgumentName("recursive")]
		public bool? Recursive { get; set; }

        /// <summary>
		/// Preserve access tier during service to service copy. Please refer to [Azure Blob storage: hot, cool, and archive access tiers](https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers) to ensure destination storage account supports setting access tier. In the cases that setting access tier is not supported, please use s2sPreserveAccessTier=false to bypass copying access tier. (default true).  (default true)
        /// </summary>
		[CLIArgumentName("s2s-preserve-access-tier")]
		public bool? S2sPreserveAccessTier { get; set; }

        /// <summary>
		/// Caps the transfer rate, in megabits per second. Moment-by-moment throughput might vary slightly from the cap. If this option is set to zero, or it is omitted, the throughput isn't capped.
        /// </summary>
		[CLIArgumentName("cap-mbps")]
		public float? CapMbps { get; set; }

        /// <summary>
		/// Format of the command's output. The choices include: text, json. The default value is 'text'. (default "text")
        /// </summary>
		[CLIArgumentName("output-type", true)]
		public string OutputType { get; set; }

        /// <summary>
		/// Specifies additional domain suffixes where Azure Active Directory login tokens may be sent.  The default is '*.core.windows.net;*.core.chinacloudapi.cn;*.core.cloudapi.de;*.core.usgovcloudapi.net'. Any listed here are added to the default. For security, you should only put Microsoft Azure domains here. Separate multiple entries with semi-colons.
        /// </summary>
		[CLIArgumentName("trusted-microsoft-suffixes", true)]
		public string TrustedMicrosoftSuffixes { get; set; }

	}
}